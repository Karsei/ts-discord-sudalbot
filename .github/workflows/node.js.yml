name: Node.js CI

on:
  push:
    branches:
      - "*"

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Use Node.js ${{ matrix.node-version }}
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: init
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm run init
    - run: npm test

  deploy:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Use Node.js ${{ matrix.node-version }}
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Create env file
      run: |
        touch .env
        echo APP_NAME=${{ vars.PROD_APP_NAME }} >> .env
        echo SERVER_PORT=${{ secrets.PROD_SERVER_PORT }} >> .env
        echo REACT_APP_DISCORD_URL_BOT_HOST=${{ vars.PROD_REACT_APP_DISCORD_URL_BOT_HOST }} >> .env
        echo REACT_APP_DISCORD_BOT_CLIENT_ID=${{ secrets.PROD_REACT_APP_DISCORD_BOT_CLIENT_ID }} >> .env
        echo DISCORD_BOT_CLIENT_SECRET=${{ secrets.PROD_DISCORD_BOT_CLIENT_SECRET }} >> .env
        echo DISCORD_BOT_TOKEN=${{ secrets.PROD_DISCORD_BOT_TOKEN }} >> .env
        echo DISCORD_URL_BOT_AUTHORIZE_URI=${{ vars.PROD_DISCORD_URL_BOT_AUTHORIZE_URI }} >> .env
        echo DISCORD_BOT_TEST_SERVER_ID=${{ vars.PROD_DISCORD_BOT_TEST_SERVER_ID }} >> .env
        echo PUBLIC_URL=${{ vars.PROD_PUBLIC_URL }} >> .env
        echo REDIS_HOST=${{ secrets.PROD_REDIS_HOST }} >> .env
        echo REDIS_PORT=${{ secrets.PROD_REDIS_PORT }} >> .env
        echo REDIS_DB=${{ secrets.PROD_REDIS_DB }} >> .env
        echo REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }} >> .env
        echo MARIADB_HOST=${{ secrets.PROD_MARIADB_HOST }} >> .env
        echo MARIADB_PORT=${{ secrets.PROD_MARIADB_PORT }} >> .env
        echo MARIADB_DATABASE=${{ secrets.PROD_MARIADB_DATABASE }} >> .env
        echo MARIADB_USER=${{ secrets.PROD_MARIADB_USER }} >> .env
        echo MARIADB_PASSWORD=${{ secrets.PROD_MARIADB_PASSWORD }} >> .env
        echo MARIADB_CONNECTION_LIMIT=${{ vars.PROD_MARIADB_CONNECTION_LIMIT }} >> .env
        echo REDDIT_CLIENT_ID=${{ secrets.PROD_REDDIT_CLIENT_ID }} >> .env
        echo REDDIT_CLIENT_SECRET=${{ secrets.PROD_REDDIT_CLIENT_SECRET }} >> .env
        echo REDDIT_CLIENT_REFRESH_TOKEN=${{ secrets.PROD_REDDIT_CLIENT_REFRESH_TOKEN }} >> .env
        echo REDDIT_CLIENT_ACCESS_TOKEN=${{ secrets.PROD_REDDIT_CLIENT_ACCESS_TOKEN }} >> .env
        echo XIVAPI_KEY=${{ secrets.PROD_XIVAPI_KEY }} >> .env

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_PRIVATE_KEY" > ./deploy.key
        sudo chmod 600 ./deploy.key
        echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
        SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}

    - name: Install PM2
      run: npm i pm2 -g

    - name: Deploy
      run: |
        pm2 deploy ecosystem.config.js production

    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: npx semantic-release@22 --no-ci --dry-run false