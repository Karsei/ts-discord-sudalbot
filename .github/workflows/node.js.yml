# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches:
      - "*"
      - feature/deploy-test

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    # - uses: actions/cache@v3
    #   id: cache
    #   with:
    #     path: |
    #       ~/.npm
    #       **/node_modules
    #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-node-

    - name: Use Node.js ${{ matrix.node-version }}
      # if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: test env
      run: |
        echo $APP_NAME
        echo ${{ vars.APP_NAME }}
        echo ${{ secrets.APP_NAME }}
    
    - name: init
      # if: steps.cache.outputs.cache-hit != 'true'
      #run: npm ci
      run: npm run init
    #- run: npm run build --if-present
    - run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    # - uses: actions/cache@v3
    #   id: cache
    #   with:
    #     path: |
    #       ~/.npm
    #       **/node_modules
    #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-node-

    - name: Use Node.js ${{ matrix.node-version }}
      # if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Create env file
      run: |
        touch .env
        echo APP_NAME=${{ env.APP_NAME }} >> .env
        echo SERVER_PORT=${{ env.SERVER_PORT }} >> .env
        echo REACT_APP_DISCORD_URL_BOT_HOST=${{ env.REACT_APP_DISCORD_URL_BOT_HOST }} >> .env
        echo REACT_APP_DISCORD_BOT_CLIENT_ID=${{ env.REACT_APP_DISCORD_BOT_CLIENT_ID }} >> .env
        echo DISCORD_BOT_CLIENT_SECRET=${{ env.DISCORD_BOT_CLIENT_SECRET }} >> .env
        echo DISCORD_BOT_TOKEN=${{ env.DISCORD_BOT_TOKEN }} >> .env
        echo DISCORD_URL_BOT_AUTHORIZE_URI=${{ env.DISCORD_URL_BOT_AUTHORIZE_URI }} >> .env
        echo DISCORD_BOT_TEST_SERVER_ID=${{ env.DISCORD_BOT_TEST_SERVER_ID }} >> .env
        echo PUBLIC_URL=${{ env.PUBLIC_URL }} >> .env
        echo REDIS_HOST=${{ env.REDIS_HOST }} >> .env
        echo REDIS_PORT=${{ env.REDIS_PORT }} >> .env
        echo REDIS_DB=${{ env.REDIS_DB }} >> .env
        echo REDIS_PASSWORD=${{ env.REDIS_PASSWORD }} >> .env
        echo MARIADB_HOST=${{ env.MARIADB_HOST }} >> .env
        echo MARIADB_PORT=${{ env.MARIADB_PORT }} >> .env
        echo MARIADB_DATABASE=${{ env.MARIADB_DATABASE }} >> .env
        echo MARIADB_USER=${{ env.MARIADB_USER }} >> .env
        echo MARIADB_PASSWORD=${{ env.MARIADB_PASSWORD }} >> .env
        echo MARIADB_CONNECTION_LIMIT=${{ env.MARIADB_CONNECTION_LIMIT }} >> .env
        echo REDDIT_CLIENT_ID=${{ env.REDDIT_CLIENT_ID }} >> .env
        echo REDDIT_CLIENT_SECRET=${{ env.REDDIT_CLIENT_SECRET }} >> .env
        echo REDDIT_CLIENT_REFRESH_TOKEN=${{ env.REDDIT_CLIENT_REFRESH_TOKEN }} >> .env
        echo REDDIT_CLIENT_ACCESS_TOKEN=${{ env.REDDIT_CLIENT_ACCESS_TOKEN }} >> .env
        echo XIVAPI_KEY=${{ env.XIVAPI_KEY }} >> .env

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_PRIVATE_KEY" > ./deploy.key
        sudo chmod 600 ./deploy.key
        echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
        SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}

    - name: Install PM2
      run: npm i pm2 -g

    - name: Deploy
      run: |
        pm2 deploy ecosystem.config.js production setup
        pm2 deploy ecosystem.config.js production

    #- name: Release
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    #  run: npx semantic-release@22 --no-ci --dry-run false
